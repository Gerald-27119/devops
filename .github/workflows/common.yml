name: 'COMMON'

on:
  push:

jobs:
  lint:
    if: github.ref != 'refs/heads/master'
    name: Lint (ESLint)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: npm ci
      - run: npm run lint

  unit_tests:
    if: github.ref != 'refs/heads/master'
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: npm ci
      - run: npm run test:unit

  build:
    if: always()
    name: Build & Archive Docker Image
    runs-on: ubuntu-latest
    needs:
      - lint
      - unit_tests
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/kolos:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/kolos:latest
          load: true
          push: false
      - run: docker save ${{ secrets.DOCKERHUB_USERNAME }}/kolos:${{ github.sha }} -o image.tar
      - uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  deploy_staging:
    if: always() && github.ref == 'refs/heads/master'
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: staging
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
      - run: |
          echo ">>> Symulacja obraz wdroÅ¼ony na staging."
#/aaa
  deploy_production:
    if: always() && github.ref == 'refs/heads/master'
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy_staging
    environment:
      name: production
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
      - uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - run: docker load -i image.tar
      - run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/kolos:${{ github.sha }}
  final_report:
    name: Final Report
    runs-on: ubuntu-latest
    needs:
      - lint
      - unit_tests
      - build
      - deploy_staging
      - deploy_production
    if: always()
    steps:
      - run: |
          echo "==== Pipeline Report ====" > raport.txt
          echo "Lint: ${{ needs.lint.result }}"            >> raport.txt
          echo "Unit Tests: ${{ needs.unit_tests.result }}" >> raport.txt
          echo "Build: ${{ needs.build.result }}"          >> raport.txt
          echo "Staging: ${{ needs.deploy_staging.result }}">> raport.txt
          echo "Production: ${{ needs.deploy_production.result || 'skipped' }}" >> raport.txt
      - uses: actions/upload-artifact@v4
        with:
          name: pipeline-report
          path: raport.txt